## 1. distribution
########################## data formating #############################
distribution.dat <- read.csv("Data/pupaeSamplingCore.csv")
View(distribution.dat)
## 2. thermal performance curve
########################## data formating #############################
tpc_data <- read.csv("Data/TPC_data_without na.csv")
read("StanModels/tpc_sqrt_varingSD.stan")
open("StanModels/tpc_sqrt_varingSD.stan")
# if only want to examine the fitted results, you may directly read the fitted model run by Jinlin before
load("StanFits/fit_tpc_sqrt_varingSD_noBound")
## model diagnostics
# 1. print out fitted values and examine the RHat
print(fit_tpc_sqrt_varingSD_noBound, pars = c("a","b","RTmax","RTmin", "sigma_y", "mu_a", "mu_b", "mu_RTmin", "mu_RTmax", "sigma_a","sigma_b","sigma_RTmin","sigma_RTmax"))
## get knockdown tolerance traits from knockdown experiment
## hot knockdown ##
hot.data <- read.csv("Data/hot_tolerance_data.csv")
## cold knockdown ##
cold.data <- read.csv("Data/cold_tolerance_data.csv")
## write model.stan file
# the function creat the stan file. This stan file works on one treatment at one time, it analyzes the 6 pairs together. There are 3 blocks for five pairs done in Dec and 2 blocks for the PAN_PAL pair done in Sep.
source('NegBFunction_1treatment_6Pairs_5block.R')
Write_Stan_NegB_1layer_6pairs_5blocks(PreparedData1 = dat,
'6pairs_cold',
AlphaLowerBound = TRUE, AlphaSD= 1)
########################## fit upland data #############################
## read in data
dat <- read.csv('Data/sixPairs_cold.csv')
## prepare the data for model fitting
dat <- dat %>%
mutate(r.ind = NA, Aii.ind = NA, Aij.ind = NA, blockN = NA)
## 0. preparation
## packages
library(tidyverse) # plot and data wrangling
########################## fit lowland data #############################
## read in data
dat <- read.csv('sixPairs_hot.csv')
########################## fit upland data #############################
## read in data
dat <- read.csv('Data/sixPairs_cold.csv')
## prepare the data for model fitting
dat <- dat %>%
mutate(r.ind = NA, Aii.ind = NA, Aij.ind = NA, blockN = NA)
# "ind"" indicates which growth rate/alpha should be used for this entry
# the following code assign the "ind"s to each entry
for (k in 1:length(dat$tubeID)){
dat$r.ind[k] = dat$i.ind[k]
dat$Aii.ind[k] = locateA17[dat$i.ind[k], dat$i.ind[k]]
dat$Aij.ind[k] = ifelse(dat$type[k] == "intra", 0, locateA17[dat$j.ind[k], dat$i.ind[k]])
temp <- tail(strsplit(dat$block[k],"")[[1]], n = 1)
dat$blockN[k] = ifelse(dat$block[k] == "SEP_ coldA", 4,  # for PAN and PAL, those blocks done during SEP are block 4 and 5
ifelse(dat$block[k] == "SEP_ coldB", 5,
ifelse(temp == "A", 1, ifelse(temp == "B", 2, 3))))
}
## write model.stan file
# the function creat the stan file. This stan file works on one treatment at one time, it analyzes the 6 pairs together. There are 3 blocks for five pairs done in Dec and 2 blocks for the PAN_PAL pair done in Sep.
source('NegBFunction_1treatment_6Pairs_5block.R')
Write_Stan_NegB_1layer_6pairs_5blocks(PreparedData1 = dat,
'6pairs_cold',
AlphaLowerBound = TRUE, AlphaSD= 1)
## 4. short-term competition and equilirium states
########################## preparation #############################
# species list - the order of the species must not be changed in this list!!
species <- c('BIP', 'PAL', 'PAN', 'PST', 'SUL')
# pair indicated by their species index
pairs <- rbind(c(1,2), c(1,3), c(1,4), c(1,5), c(2,5), c(2,3))
# array of Aij (inter- or intra-specific competition terms) for all 6 pairs
locateA17 <- cbind(c(1,2,3,4,5), c(6,7,8,NA,9), c(10,11,12,NA,NA), c(13,NA,NA,14,NA), c(15,16,NA,NA,17))
## write model.stan file
# the function creat the stan file. This stan file works on one treatment at one time, it analyzes the 6 pairs together. There are 3 blocks for five pairs done in Dec and 2 blocks for the PAN_PAL pair done in Sep.
source('NegBFunction_1treatment_6Pairs_5block.R')
Write_Stan_NegB_1layer_6pairs_5blocks(PreparedData1 = dat,
'6pairs_cold',
AlphaLowerBound = TRUE, AlphaSD= 1)
########################## fit upland data #############################
## read in data
dat <- read.csv('Data/sixPairs_cold.csv')
## prepare the data for model fitting
dat <- dat %>%
mutate(r.ind = NA, Aii.ind = NA, Aij.ind = NA, blockN = NA)
# "ind"" indicates which growth rate/alpha should be used for this entry
# the following code assign the "ind"s to each entry
for (k in 1:length(dat$tubeID)){
dat$r.ind[k] = dat$i.ind[k]
dat$Aii.ind[k] = locateA17[dat$i.ind[k], dat$i.ind[k]]
dat$Aij.ind[k] = ifelse(dat$type[k] == "intra", 0, locateA17[dat$j.ind[k], dat$i.ind[k]])
temp <- tail(strsplit(dat$block[k],"")[[1]], n = 1)
dat$blockN[k] = ifelse(dat$block[k] == "SEP_ coldA", 4,  # for PAN and PAL, those blocks done during SEP are block 4 and 5
ifelse(dat$block[k] == "SEP_ coldB", 5,
ifelse(temp == "A", 1, ifelse(temp == "B", 2, 3))))
}
## write model.stan file
# the function creat the stan file. This stan file works on one treatment at one time, it analyzes the 6 pairs together. There are 3 blocks for five pairs done in Dec and 2 blocks for the PAN_PAL pair done in Sep.
source('NegBFunction_1treatment_6Pairs_5block.R')
Write_Stan_NegB_1layer_6pairs_5blocks(PreparedData1 = dat,
'6pairs_cold',
AlphaLowerBound = TRUE, AlphaSD= 1)
Write_Stan_NegB_1layer_6pairs_5blocks(PreparedData1 = dat,
'6pairs_cold',
AlphaLowerBound = TRUE, AlphaSD= 1)
########################## visualizing inter-specific competition  #############################
# optional code to conduct the follwoing analysis without fitting the model again - use the model I fitted before
load("StanFits/fit_6pairs_hot")
load("StanFits/fit_6pairs_cold")
## 5. long-term competition
########################## data formating  #############################
## preparing data
longdat <- read.csv("Data/long_term_competition_PAN-PAL.csv")
View(longdat)
load('StanFits/fit_NegB_PANPAL_longterm')
View(fit)
## Supplementarty figure 4C - diagnostics
# convergence - acceptable ESS
print(fit)
library(tidyverse) # plot and data wrangling
library(lme4) # mix effect model
library(ggrepel) # work with ggplot to add non-overlapping text labels to points
library(cowplot) # plot multiple ggplot into one graph. Compare with library(ggpubr), this package can alige the plots better
library(rstan); options(mc.cores = parallel::detectCores()); rstan_options(auto_write = TRUE) # to fit tpc by Bayesian statistics
library(bayesplot) # use its function "ppc_dens_overlay" to do fitting diagnostics
library(ape) # to read phylogenetic tree and do relavant stuff
library(brms) # phylogenetic regression
## Layout
sessionInfo()
